const { keith } = require('../commandHandler');
const fetch = require("node-fetch");

const toFancyUppercaseFont = (text) => {
    const fonts = {
        'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 'H': 'ùêá', 
        'I': 'ùêà', 'J': 'ùêâ', 'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 'O': 'ùêé', 'P': 'ùêè', 
        'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì', 'U': 'ùêî', 'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 
        'Y': 'ùêò', 'Z': 'ùêô'
    };
    return text.split('').map(char => fonts[char] || char).join('');
};

const toFancyLowercaseFont = (text) => {
    const fonts = {
        "a": "·¥Ä", "b": " ô", "c": "·¥Ñ", "d": "·¥Ö", "e": "·¥á", "f": "Íú∞", "g": "…¢", "h": " ú", 
        "i": "…™", "j": "·¥ä", "k": "·¥ã", "l": " ü", "m": "·¥ç", "n": "…¥", "o": "·¥è", "p": "·¥ò", 
        "q": "œô", "r": " Ä", "s": "Íú±", "t": "·¥õ", "u": "·¥ú", "v": "·¥†", "w": "·¥°", "x": "x", 
        "y": " è", "z": "·¥¢"
    };
    return text.split('').map(char => fonts[char.toLowerCase()] || char).join('');
};

keith({
    pattern: "bard2",
    alias: ["bardai", "aibard"],
    desc: "Chat with AI using Keith's API",
    category: "AI",
    react: "üóø",
    filename: __filename
}, async (context) => {
    try {
        const { client, m, text, sendReply } = context;

        if (!text) {
            const fancyMessage = toFancyLowercaseFont("i am an ai based on the model developed by keith. how can i assist you today? ‚ò∫Ô∏è");
            return sendReply(client, m, fancyMessage);
        }

        try {
            const apiUrl = `https://apis-keith.vercel.app/ai/bard?q=${encodeURIComponent(text)}`;
            const response = await fetch(apiUrl);
            
            if (!response.ok) throw new Error("API request failed");
            
            const data = await response.json();

            if (data.status && data.result) {
                // Apply fancy font to the response
                const fancyResponse = toFancyLowercaseFont(data.result);
                await sendReply(client, m, fancyResponse);
            } else {
                throw new Error("Invalid API response");
            }
        } catch (e) {
            console.error("API Error:", e);
            const errorMessage = toFancyLowercaseFont("sorry, i encountered an error while processing your request. please try again later.");
            sendReply(client, m, errorMessage);
        }
    } catch (error) {
        console.error("Command Error:", error);
        const errorMessage = toFancyLowercaseFont("an unexpected error occurred. please try again.");
        sendReply(client, m, errorMessage);
    }
});
